{"version":3,"sources":["components/TodoList.js","components/Kanban.js","App.js","reportWebVitals.js","index.js"],"names":["makeStyles","theme","root","width","backgroundColor","palette","background","paper","useStyles","maxWidth","Kanban","useState","id","title","wtatus","tasks","taskIds","columns","columnOrder","classes","map","columnId","column","columnTasks","taskId","Card","className","CardHeader","CardContent","List","task","ListItem","role","undefined","dense","button","ListItemText","primary","CardActions","disableSpacing","flexGrow","jumbotron","padding","spacing","margin","marginTop","marginBottom","createMuiTheme","type","App","axios","defaults","baseURL","process","headers","common","console","log","React","value","setValue","ThemeProvider","CssBaseline","Paper","Tabs","onChange","event","newValue","indicatorColor","textColor","centered","Tab","label","Typography","variant","align","TabPanel","index","props","children","other","hidden","aria-labelledby","Box","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wZAkBkBA,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,OACPC,gBAAiBH,EAAMI,QAAQC,WAAWC,W,wCCRxCC,EAAYR,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJO,SAAU,SAIC,SAASC,IAAU,IAAD,EACDC,mBAAS,CACrC,SAAU,CAAEC,GAAI,SAAUC,MAAO,SAAUC,OAAQ,QACnD,SAAU,CAAEF,GAAI,SAAUC,MAAO,SAAUC,OAAQ,QACnD,SAAU,CAAEF,GAAI,SAAUC,MAAO,SAAUC,OAAQ,SACnD,SAAU,CAAEF,GAAI,SAAUC,MAAO,SAAUC,OAAQ,UAJ9CC,EADwB,sBAOGJ,mBAAS,CACzC,WAAY,CACVC,GAAI,WACJC,MAAO,WACPG,QAAS,CAAC,SAAU,WAEtB,WAAY,CAAEJ,GAAI,WAAYC,MAAO,WAAYG,QAAS,CAAC,WAC3D,WAAY,CAAEJ,GAAI,WAAYC,MAAO,WAAYG,QAAS,CAAC,aAPtDC,EAPwB,sBAgBWN,mBAAS,CACjD,WACA,WACA,aAHKO,EAhBwB,oBAsBzBC,EAAUX,IAEhB,OACE,8BACGU,EAAYE,KAAI,SAACC,GAChB,IAAMC,EAASL,EAAQI,GACjBE,EAAcD,EAAON,QAAQI,KAAI,SAACI,GAAD,OAAYT,EAAMS,MAGzD,OACE,eAACC,EAAA,EAAD,CAAMC,UAAWP,EAAQjB,KAAzB,UACE,cAACyB,EAAA,EAAD,CAAYd,MAAOS,EAAOT,QAC1B,cAACe,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACGN,EAAYH,KAAI,SAACU,GAAD,OACf,cAACC,EAAA,EAAD,CAAwBC,UAAMC,EAAWC,OAAK,EAACC,QAAM,EAArD,SACE,cAACC,EAAA,EAAD,CAAcxB,GAAIkB,EAAKlB,GAAIyB,QAASP,EAAKjB,SAD5BiB,EAAKlB,WAM1B,cAAC0B,EAAA,EAAD,CAAaC,gBAAc,YC7CvC,IAAM/B,EAAYR,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJsC,SAAU,EACVpC,gBAAiB,cAEnBqC,UAAW,CACTC,QAASzC,EAAM0C,QAAQ,GACvBC,OAAQ,OACRC,UAAW5C,EAAM0C,QAAQ,GACzBlC,SAAU,OAEZF,MAAO,CACLmC,QAASzC,EAAM0C,QAAQ,GACvBC,OAAQ,OACRC,UAAW5C,EAAM0C,QAAQ,GACzBG,aAAc7C,EAAM0C,QAAQ,GAC5BlC,SAAU,SAIRR,EAAQ8C,YAAe,CAC3B1C,QAAS,CACP2C,KAAM,UAyDKC,MArDf,WAUEC,IAAMC,SAASC,QAAUC,wBACzBH,IAAMC,SAASG,QAAQC,OAAO,gBAAkB,mBAEhDC,QAAQC,IAAIJ,yBACZG,QAAQC,IAAIP,IAAMC,UAElB,IAAMhC,EAAUX,IAhBH,EAkBakD,IAAM/C,SAAS,GAlB5B,mBAkBNgD,EAlBM,KAkBCC,EAlBD,KAwBb,OACE,eAACC,EAAA,EAAD,CAAe5D,MAAOA,EAAtB,UACE,cAAC6D,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CAAOrC,UAAWP,EAAQjB,KAA1B,UACE,eAAC8D,EAAA,EAAD,CACEL,MAAOA,EACPM,SAVa,SAACC,EAAOC,GAC3BP,EAASO,IAUHC,eAAe,YACfC,UAAU,YACVC,UAAQ,EALV,UAOE,cAACC,EAAA,EAAD,CAAKC,MAAM,cACX,cAACD,EAAA,EAAD,CAAKC,MAAM,cAGb,cAACT,EAAA,EAAD,CAAOrC,UAAWP,EAAQsB,UAA1B,SACE,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,SAA/B,kCAKF,cAACC,EAAD,CAAUjB,MAAOA,EAAOkB,MAAO,EAA/B,SACE,cAACnE,EAAD,aASV,SAASkE,EAASE,GAAQ,IAChBC,EAAqCD,EAArCC,SAAUpB,EAA2BmB,EAA3BnB,MAAOkB,EAAoBC,EAApBD,MAAUG,EADZ,YACsBF,EADtB,8BAGvB,OACE,6CACE9C,KAAK,WACLiD,OAAQtB,IAAUkB,EAClBjE,GAAE,uBAAkBiE,GACpBK,kBAAA,kBAA4BL,IACxBG,GALN,aAOGrB,IAAUkB,GACT,cAACM,EAAA,EAAD,CAAKC,EAAG,EAAR,SACE,cAACX,EAAA,EAAD,UAAaM,SC/GvB,IAYeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d037e476.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  IconButton,\r\n  ListItemIcon,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function TodoList() {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState([0]);\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    console.log(value);\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n    updateTodo(value);\r\n  };\r\n\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getTodos();\r\n  }, []);\r\n\r\n  const getTodos = () => {\r\n    axios\r\n      .get(\"/\")\r\n      .then((res) => {\r\n        console.log(res);\r\n        setTodos(res.data);\r\n      })\r\n      .catch(console.error);\r\n  };\r\n\r\n  const addTodo = () => {\r\n    title !== \"\" &&\r\n      axios\r\n        .post(\"/\", {\r\n          title,\r\n          status: \"todo\",\r\n        })\r\n        .then((res) => {\r\n          console.log(res);\r\n          setTodos([res.data, ...todos]);\r\n          setTitle(\"\");\r\n        })\r\n        .catch(console.error);\r\n  };\r\n\r\n  const deleteTodo = (value) => {\r\n    axios\r\n      .delete(`/${value}`)\r\n      .then((res) => {\r\n        console.log(res);\r\n        setTodos(todos.filter((todo) => todo._id !== value));\r\n      })\r\n      .catch(console.error);\r\n  };\r\n\r\n  const updateTodo = (value) => {\r\n    axios\r\n      .put(`/${value._id}`, { status: \"done\" })\r\n      .then((res) => {\r\n        console.log(res);\r\n      })\r\n      .catch(console.error);\r\n  };\r\n\r\n  return (\r\n    <div onKeyPress={(e) => e.code === \"Enter\" && title !== \"\" && addTodo()}>\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item sm={8}>\r\n          <TextField\r\n            label=\"Nouvelle tâche\"\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            value={title}\r\n            margin=\"dense\"\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            fullWidth\r\n            autoFocus\r\n          />\r\n        </Grid>\r\n        <Grid item sm={4}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            onClick={addTodo}\r\n            fullWidth\r\n            size=\"large\"\r\n          >\r\n            Ajouter\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item sm={12}>\r\n        <List className={classes.root}>\r\n          {todos.map((todo) => {\r\n            return (\r\n              <ListItem\r\n                key={todo._id}\r\n                role={undefined}\r\n                dense\r\n                button\r\n                // onClick={handleToggle(todo)}\r\n              >\r\n                <ListItemIcon>\r\n                  <Tooltip\r\n                    title={\r\n                      todo.status !== \"done\"\r\n                        ? \"Marquer la tâche comme complète\"\r\n                        : \"\"\r\n                    }\r\n                  >\r\n                    <Checkbox\r\n                      edge=\"start\"\r\n                      checked={\r\n                        checked.indexOf(todo) !== -1 || todo.status === \"done\"\r\n                      }\r\n                      tabIndex={-1}\r\n                      disableRipple\r\n                      onChange={handleToggle(todo)}\r\n                    />\r\n                  </Tooltip>\r\n                </ListItemIcon>\r\n                <ListItemText id={todo._id} primary={todo.title} />\r\n                <ListItemSecondaryAction>\r\n                  <IconButton onClick={() => deleteTodo(todo._id)}>\r\n                    <Tooltip title=\"Supprimer de la liste\">\r\n                      <DeleteIcon />\r\n                    </Tooltip>\r\n                  </IconButton>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </List>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n// import Column from \"./Column\";\r\nimport {\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n}));\r\n\r\nexport default function Kanban() {\r\n  const [tasks, /*setTasks*/] = useState({\r\n    \"task-1\": { id: \"task-1\", title: \"Task 1\", wtatus: \"todo\" },\r\n    \"task-2\": { id: \"task-2\", title: \"Task 2\", wtatus: \"todo\" },\r\n    \"task-3\": { id: \"task-3\", title: \"Task 3\", wtatus: \"doing\" },\r\n    \"task-4\": { id: \"task-4\", title: \"Task 4\", wtatus: \"done\" },\r\n  });\r\n  const [columns, /*setColumns*/] = useState({\r\n    \"column-1\": {\r\n      id: \"column-1\",\r\n      title: \"Column 1\",\r\n      taskIds: [\"task-1\", \"task-2\"],\r\n    },\r\n    \"column-2\": { id: \"column-2\", title: \"Column 2\", taskIds: [\"task-3\"] },\r\n    \"column-3\": { id: \"column-3\", title: \"Column 3\", taskIds: [\"task-4\"] },\r\n  });\r\n  const [columnOrder, /*setColumnOrder*/] = useState([\r\n    \"column-1\",\r\n    \"column-2\",\r\n    \"column-3\",\r\n  ]);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      {columnOrder.map((columnId) => {\r\n        const column = columns[columnId];\r\n        const columnTasks = column.taskIds.map((taskId) => tasks[taskId]);\r\n\r\n        // return <Column key={columnId} column={column} tasks={columnTasks} />;\r\n        return (\r\n          <Card className={classes.root}>\r\n            <CardHeader title={column.title} />\r\n            <CardContent>\r\n              <List>\r\n                {columnTasks.map((task) => (\r\n                  <ListItem key={task.id} role={undefined} dense button>\r\n                    <ListItemText id={task.id} primary={task.title} />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </CardContent>\r\n            <CardActions disableSpacing></CardActions>\r\n          </Card>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport {\r\n  Box,\r\n  createMuiTheme,\r\n  CssBaseline,\r\n  makeStyles,\r\n  Paper,\r\n  ThemeProvider,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport PropTypes from \"prop-types\";\r\nimport Kanban from \"./components/Kanban\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: \"darkorange\",\r\n  },\r\n  jumbotron: {\r\n    padding: theme.spacing(1),\r\n    margin: \"auto\",\r\n    marginTop: theme.spacing(1),\r\n    maxWidth: \"90%\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: \"auto\",\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(5),\r\n    maxWidth: 500,\r\n  },\r\n}));\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  // axios.defaults.baseURL = `${\r\n  //   !(\r\n  //     process.env.REACT_APP_BACKEND_URL.startsWith(\"http\") ||\r\n  //     process.env.REACT_APP_BACKEND_URL.startsWith(\"https\")\r\n  //   )\r\n  //     ? \"http://\"\r\n  //     : \"\"\r\n  // }${process.env.REACT_APP_BACKEND_URL}`;\r\n\r\n  axios.defaults.baseURL = process.env.REACT_APP_BACKEND_URL;\r\n  axios.defaults.headers.common[\"Content-Type\"] = \"application/json\";\r\n\r\n  console.log(process.env.REACT_APP_BACKEND_URL);\r\n  console.log(axios.defaults);\r\n\r\n  const classes = useStyles();\r\n\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Paper className={classes.root}>\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"secondary\"\r\n          textColor=\"secondary\"\r\n          centered\r\n        >\r\n          <Tab label=\"Todo List\" />\r\n          <Tab label=\"Kanban\" />\r\n        </Tabs>\r\n\r\n        <Paper className={classes.jumbotron}>\r\n          <Typography variant=\"h3\" align=\"center\">\r\n            Todo List & Kanban\r\n          </Typography>\r\n        </Paper>\r\n\r\n        <TabPanel value={value} index={1}>\r\n          <Kanban />\r\n        </TabPanel>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`nav-tabpanel-${index}`}\r\n      aria-labelledby={`nav-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}